---
import BaseLayout from './BaseLayout.astro';

interface Props {
  title: string;
  description: string;
  pubDate: Date;
  updatedDate?: Date;
  author: string;
  tags: string[];
}

const { title, description, pubDate, updatedDate, author, tags } = Astro.props;

const formattedPubDate = new Intl.DateTimeFormat('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
}).format(pubDate);

const formattedUpdatedDate = updatedDate
  ? new Intl.DateTimeFormat('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    }).format(updatedDate)
  : undefined;
---

<BaseLayout title={title} description={description}>
  <article class="blog-post">
    <header class="post-header">
      <h1>{title}</h1>
      <div class="post-meta">
        <time datetime={pubDate.toISOString()}>{formattedPubDate}</time>
        {formattedUpdatedDate && (
          <span class="updated">
            (Updated: <time datetime={updatedDate?.toISOString()}>{formattedUpdatedDate}</time>)
          </span>
        )}
        <span class="author">by {author}</span>
      </div>
      {tags.length > 0 && (
        <div class="tags">
          {tags.map((tag) => (
            <span class="tag">{tag}</span>
          ))}
        </div>
      )}
    </header>
    <div class="post-content">
      <slot />
    </div>
  </article>
</BaseLayout>

<style>
  .blog-post {
    max-width: 680px;
    margin: 0 auto;
    padding: 4rem 2rem;
  }

  .post-header {
    margin-bottom: 4rem;
    text-align: center;
  }

  h1 {
    font-size: 3rem;
    font-weight: 700;
    line-height: 1.1;
    letter-spacing: -0.03em;
    margin-bottom: 1.5rem;
    color: var(--color-heading);
  }

  .post-meta {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    color: var(--color-text-secondary);
    margin-bottom: 1.5rem;
  }

  .post-meta time {
    font-weight: 400;
  }

  .post-meta::after {
    content: "â€¢";
    margin: 0 0.25rem;
  }

  .post-meta .author::before {
    content: "";
  }

  .updated {
    color: var(--color-text-secondary);
  }

  .author {
    color: var(--color-text-secondary);
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: center;
  }

  .tag {
    padding: 0.375rem 0.875rem;
    border-radius: 9999px;
    font-size: 0.8125rem;
    font-weight: 500;
    text-transform: capitalize;
    letter-spacing: 0;
    border: none;
  }

  /* Tag color variants - light mode */
  .tag.tag-blue {
    background-color: #dbeafe;
    color: #1e40af;
  }

  .tag.tag-purple {
    background-color: #e9d5ff;
    color: #6b21a8;
  }

  .tag.tag-green {
    background-color: #d1fae5;
    color: #065f46;
  }

  .tag.tag-orange {
    background-color: #fed7aa;
    color: #9a3412;
  }

  .tag.tag-pink {
    background-color: #fce7f3;
    color: #9f1239;
  }

  .tag.tag-cyan {
    background-color: #cffafe;
    color: #155e75;
  }

  .tag.tag-amber {
    background-color: #fef3c7;
    color: #92400e;
  }

  .tag.tag-indigo {
    background-color: #e0e7ff;
    color: #3730a3;
  }

  /* Tag color variants - dark mode */
  @media (prefers-color-scheme: dark) {
    :root:not([data-theme="light"]) .tag.tag-blue {
      background-color: #1e3a8a;
      color: #93c5fd;
    }

    :root:not([data-theme="light"]) .tag.tag-purple {
      background-color: #581c87;
      color: #d8b4fe;
    }

    :root:not([data-theme="light"]) .tag.tag-green {
      background-color: #064e3b;
      color: #6ee7b7;
    }

    :root:not([data-theme="light"]) .tag.tag-orange {
      background-color: #7c2d12;
      color: #fdba74;
    }

    :root:not([data-theme="light"]) .tag.tag-pink {
      background-color: #831843;
      color: #f9a8d4;
    }

    :root:not([data-theme="light"]) .tag.tag-cyan {
      background-color: #164e63;
      color: #67e8f9;
    }

    :root:not([data-theme="light"]) .tag.tag-amber {
      background-color: #78350f;
      color: #fcd34d;
    }

    :root:not([data-theme="light"]) .tag.tag-indigo {
      background-color: #312e81;
      color: #a5b4fc;
    }
  }

  :root[data-theme="dark"] .tag.tag-blue {
    background-color: #1e3a8a;
    color: #93c5fd;
  }

  :root[data-theme="dark"] .tag.tag-purple {
    background-color: #581c87;
    color: #d8b4fe;
  }

  :root[data-theme="dark"] .tag.tag-green {
    background-color: #064e3b;
    color: #6ee7b7;
  }

  :root[data-theme="dark"] .tag.tag-orange {
    background-color: #7c2d12;
    color: #fdba74;
  }

  :root[data-theme="dark"] .tag.tag-pink {
    background-color: #831843;
    color: #f9a8d4;
  }

  :root[data-theme="dark"] .tag.tag-cyan {
    background-color: #164e63;
    color: #67e8f9;
  }

  :root[data-theme="dark"] .tag.tag-amber {
    background-color: #78350f;
    color: #fcd34d;
  }

  :root[data-theme="dark"] .tag.tag-indigo {
    background-color: #312e81;
    color: #a5b4fc;
  }

  .post-content {
    line-height: 1.75;
    text-align: left;
  }

  .post-content :global(h2),
  .post-content :global(h3),
  .post-content :global(h4) {
    margin-top: 3rem;
    margin-bottom: 1.25rem;
    font-weight: 600;
    line-height: 1.3;
    letter-spacing: -0.02em;
    color: var(--color-heading);
  }

  .post-content :global(h2) {
    font-size: 2rem;
  }

  .post-content :global(h3) {
    font-size: 1.5rem;
  }

  .post-content :global(h4) {
    font-size: 1.25rem;
  }

  .post-content :global(p) {
    margin-bottom: 1.75rem;
    font-size: 1.0625rem;
    color: var(--color-text);
  }

  .post-content :global(ul),
  .post-content :global(ol) {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }

  .post-content :global(li) {
    margin-bottom: 0.5rem;
  }

  .post-content :global(a) {
    color: var(--color-accent-dark);
    text-decoration: none;
    font-weight: 500;
  }

  .post-content :global(a:hover) {
    color: var(--color-accent);
    text-decoration: underline;
  }

  .post-content :global(code) {
    background-color: var(--color-code-bg);
    border: 1px solid var(--color-code-border);
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
    font-family: 'Geist Mono', monospace;
    color: var(--color-heading);
  }

  .post-content :global(pre) {
    background-color: var(--color-code-bg) !important;
    border: 1px solid var(--color-code-border) !important;
    padding: 1rem !important;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin-bottom: 1.5rem;
  }

  .post-content :global(pre code) {
    background-color: transparent !important;
    border: none !important;
    padding: 0;
  }

  .post-content :global(blockquote) {
    border-left: 3px solid var(--color-accent);
    padding-left: 1.5rem;
    margin: 2rem 0;
    color: var(--color-text-secondary);
    font-style: italic;
  }

  .post-content :global(img) {
    max-width: 100%;
    height: auto;
    border-radius: 0.5rem;
    margin: 2rem 0;
    display: block;
  }

  .post-content :global(video) {
    max-width: 100%;
    height: auto;
    border-radius: 0.5rem;
    margin: 2rem 0;
    display: block;
  }

  @media (max-width: 768px) {
    .blog-post {
      padding: 2rem 1.5rem;
    }

    h1 {
      font-size: 2.25rem;
      line-height: 1.2;
    }

    .post-content :global(h2) {
      font-size: 1.75rem;
    }

    .post-content :global(h3) {
      font-size: 1.375rem;
    }

    .post-content :global(p) {
      font-size: 1rem;
    }
  }
</style>

<script>
  // Tag color assignment - deterministic based on tag name
  const tagColors = ['blue', 'purple', 'green', 'orange', 'pink', 'cyan', 'amber', 'indigo'];

  function hashString(str: string): number {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash);
  }

  function assignTagColors() {
    const tags = document.querySelectorAll('.tag');
    tags.forEach(tag => {
      const tagText = tag.textContent?.toLowerCase() || '';
      const colorIndex = hashString(tagText) % tagColors.length;
      const colorClass = `tag-${tagColors[colorIndex]}`;
      tag.classList.add(colorClass);
    });
  }

  // Assign colors on load
  assignTagColors();
</script>
