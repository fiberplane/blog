---
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';

const allPosts = await getCollection('blog');

// Filter out drafts and sort by date (newest first)
const publishedPosts = allPosts
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('en-US', {
    month: 'short',
    day: 'numeric',
  }).format(date);
};

const formatFullDate = (date: Date) => {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }).format(date);
};
---

<BaseLayout
  title="Blog"
  description="Insights and updates from the Fiberplane team on developer tools, observability, and collaborative debugging."
>
  <div class="blog-container">
    <header class="blog-header">
      <h1>Blog</h1>
    </header>

    <div class="posts-grid">
      {publishedPosts.map((post, index) => (
        <article class:list={['post-card', { 'featured': index === 0 }, { 'hidden': index >= 6 }]} data-index={index}>
          <a href={`/blog/${post.id}`} class="post-link">
            {post.data.image && (
              <div class="post-image">
                <img src={post.data.image} alt={post.data.title} loading="lazy" />
              </div>
            )}
            <div class="post-content">
              <div class="post-meta">
                <time datetime={post.data.pubDate.toISOString()} title={formatFullDate(post.data.pubDate)}>
                  {formatDate(post.data.pubDate)}
                </time>
              </div>
              <h2>{post.data.title}</h2>
              <p class="post-description">{post.data.description}</p>
              {post.data.tags.length > 0 && (
                <div class="tags">
                  {post.data.tags.map((tag) => (
                    <span class="tag">{tag}</span>
                  ))}
                </div>
              )}
            </div>
          </a>
        </article>
      ))}
    </div>

    {publishedPosts.length > 6 && (
      <div class="show-more-container">
        <button class="show-more-button" id="showMoreBtn">
          Show more posts
        </button>
      </div>
    )}

    {publishedPosts.length === 0 && (
      <div class="empty-state">
        <p>No posts published yet. Check back soon!</p>
      </div>
    )}
  </div>
</BaseLayout>

<style>
  .blog-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 3rem 1.5rem;
  }

  .blog-header {
    margin-bottom: 3rem;
  }

  .blog-header h1 {
    font-size: 2.5rem;
    font-weight: 700;
    line-height: 1.2;
    letter-spacing: -0.03em;
    color: var(--color-heading);
  }

  .posts-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    border: 1px solid var(--color-border);
    border-radius: 0.75rem;
    overflow: hidden;
  }

  /* Featured post takes up more space */
  .post-card.featured {
    grid-column: span 3;
  }

  .post-card {
    background-color: var(--color-bg);
    overflow: hidden;
    transition: background-color 0.2s ease;
    position: relative;
  }

  /* Add borders as pseudo-elements to have more control */
  .post-card::after {
    content: '';
    position: absolute;
    right: 0;
    top: 0;
    bottom: 0;
    width: 1px;
    background-color: var(--color-border);
  }

  .post-card::before {
    content: '';
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    height: 1px;
    background-color: var(--color-border);
  }

  /* Featured card spans all columns - no right border */
  .post-card.featured::after {
    display: none;
  }

  /* Remove right border from every 3rd card starting from card 2 (after featured)
     Card 1: featured (no border needed, spans all)
     Card 2: column 1 (needs right border)
     Card 3: column 2 (needs right border)
     Card 4: column 3 (NO right border) - this is 3n+1 pattern starting from card 2
     Card 5: column 1 (needs right border)
     Card 6: column 2 (needs right border)
     Card 7: column 3 (NO right border)
  */
  .post-card:nth-child(3n+4)::after,
  .post-card:nth-child(3n+1):first-child::after {
    display: none;
  }

  /* Remove bottom border from cards in last row - handled by JS class */
  .post-card.last-row::before {
    display: none;
  }

  .post-card:hover {
    background-color: hsl(0, 0%, 97%);
  }

  /* Dark mode hover */
  @media (prefers-color-scheme: dark) {
    :root:not([data-theme="light"]) .post-card:hover {
      background-color: hsl(0, 0%, 10%);
    }
  }

  :root[data-theme="dark"] .post-card:hover {
    background-color: hsl(0, 0%, 10%);
  }

  .post-link {
    text-decoration: none;
    color: inherit;
    display: flex;
    flex-direction: column;
    height: 100%;
  }

  /* Featured post has horizontal layout on larger screens */
  .post-card.featured .post-link {
    flex-direction: row;
  }

  .post-image {
    width: 100%;
    aspect-ratio: 16 / 9;
    overflow: hidden;
    background-color: var(--color-bg-secondary);
    flex-shrink: 0;
  }

  .post-card.featured .post-image {
    width: 50%;
    aspect-ratio: auto;
  }

  .post-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .post-card:hover .post-image img {
    transform: scale(1.05);
  }

  .post-content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    flex: 1;
  }

  .post-card.featured .post-content {
    padding: 2rem;
    justify-content: center;
  }

  .post-meta {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
  }

  .post-meta time {
    font-size: 0.8125rem;
    color: var(--color-text-secondary);
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .post-card h2 {
    font-size: 1.375rem;
    font-weight: 600;
    line-height: 1.3;
    letter-spacing: -0.02em;
    margin-bottom: 0.5rem;
    color: var(--color-heading);
  }

  .post-card.featured h2 {
    font-size: 2rem;
    margin-bottom: 0.75rem;
  }

  .post-description {
    font-size: 0.9375rem;
    color: var(--color-text);
    line-height: 1.6;
    margin-bottom: 1rem;
    flex: 1;
  }

  .post-card.featured .post-description {
    font-size: 1.0625rem;
    line-height: 1.6;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: auto;
  }

  .tag {
    padding: 0.25rem 0.625rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    font-weight: 500;
  }

  /* Tag color variants - light mode */
  .tag.tag-blue {
    background-color: #dbeafe;
    color: #1e40af;
  }

  .tag.tag-purple {
    background-color: #e9d5ff;
    color: #6b21a8;
  }

  .tag.tag-green {
    background-color: #d1fae5;
    color: #065f46;
  }

  .tag.tag-orange {
    background-color: #fed7aa;
    color: #9a3412;
  }

  .tag.tag-pink {
    background-color: #fce7f3;
    color: #9f1239;
  }

  .tag.tag-cyan {
    background-color: #cffafe;
    color: #155e75;
  }

  .tag.tag-amber {
    background-color: #fef3c7;
    color: #92400e;
  }

  .tag.tag-indigo {
    background-color: #e0e7ff;
    color: #3730a3;
  }

  /* Tag color variants - dark mode */
  @media (prefers-color-scheme: dark) {
    :root:not([data-theme="light"]) .tag.tag-blue {
      background-color: #1e3a8a;
      color: #93c5fd;
    }

    :root:not([data-theme="light"]) .tag.tag-purple {
      background-color: #581c87;
      color: #d8b4fe;
    }

    :root:not([data-theme="light"]) .tag.tag-green {
      background-color: #064e3b;
      color: #6ee7b7;
    }

    :root:not([data-theme="light"]) .tag.tag-orange {
      background-color: #7c2d12;
      color: #fdba74;
    }

    :root:not([data-theme="light"]) .tag.tag-pink {
      background-color: #831843;
      color: #f9a8d4;
    }

    :root:not([data-theme="light"]) .tag.tag-cyan {
      background-color: #164e63;
      color: #67e8f9;
    }

    :root:not([data-theme="light"]) .tag.tag-amber {
      background-color: #78350f;
      color: #fcd34d;
    }

    :root:not([data-theme="light"]) .tag.tag-indigo {
      background-color: #312e81;
      color: #a5b4fc;
    }
  }

  :root[data-theme="dark"] .tag.tag-blue {
    background-color: #1e3a8a;
    color: #93c5fd;
  }

  :root[data-theme="dark"] .tag.tag-purple {
    background-color: #581c87;
    color: #d8b4fe;
  }

  :root[data-theme="dark"] .tag.tag-green {
    background-color: #064e3b;
    color: #6ee7b7;
  }

  :root[data-theme="dark"] .tag.tag-orange {
    background-color: #7c2d12;
    color: #fdba74;
  }

  :root[data-theme="dark"] .tag.tag-pink {
    background-color: #831843;
    color: #f9a8d4;
  }

  :root[data-theme="dark"] .tag.tag-cyan {
    background-color: #164e63;
    color: #67e8f9;
  }

  :root[data-theme="dark"] .tag.tag-amber {
    background-color: #78350f;
    color: #fcd34d;
  }

  :root[data-theme="dark"] .tag.tag-indigo {
    background-color: #312e81;
    color: #a5b4fc;
  }

  .empty-state {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--color-text-secondary);
  }

  .empty-state p {
    font-size: 1.125rem;
  }

  /* Responsive adjustments */
  @media (max-width: 1024px) {
    .posts-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .post-card.featured {
      grid-column: span 2;
    }

    /* Remove right border from every 2nd card in 2-column layout */
    .post-card:nth-child(3n)::after {
      display: block;
    }

    .post-card:nth-child(2n)::after {
      display: none;
    }

    .post-card.featured .post-link {
      flex-direction: column;
    }

    .post-card.featured .post-image {
      width: 100%;
      aspect-ratio: 16 / 9;
    }

    .post-card.featured h2 {
      font-size: 1.5rem;
    }

    .post-card.featured .post-description {
      font-size: 0.9375rem;
    }

    /* Adjust bottom borders for 2-column layout */
    .post-card:nth-last-child(3)::before {
      display: block;
    }

    .post-card:nth-last-child(1)::before,
    .post-card:nth-last-child(2)::before {
      display: none;
    }
  }

  @media (max-width: 768px) {
    .blog-container {
      padding: 2rem 1rem;
    }

    .blog-header {
      margin-bottom: 2rem;
    }

    .blog-header h1 {
      font-size: 2rem;
    }

    .posts-grid {
      grid-template-columns: 1fr;
    }

    /* In single column, remove all right borders and only last card has no bottom border */
    .post-card {
      border-right: none;
      border-bottom: 1px solid var(--color-border);
    }

    .post-card:last-child {
      border-bottom: none;
    }

    .post-content {
      padding: 1.25rem;
    }

    .post-card h2 {
      font-size: 1.25rem;
    }
  }

  /* Hidden posts */
  .post-card.hidden {
    display: none;
  }

  /* Fade in animation for newly revealed posts */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .post-card.fade-in {
    animation: fadeIn 0.5s ease-out forwards;
  }

  /* Show more button */
  .show-more-container {
    margin-top: 3rem;
    text-align: center;
  }

  .show-more-button {
    padding: 0.875rem 2rem;
    font-size: 0.9375rem;
    font-weight: 500;
    color: var(--color-heading);
    background-color: transparent;
    border: 1px solid var(--color-border);
    border-radius: 9999px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-family: 'Geist Sans', system-ui, sans-serif;
    outline: none;
  }

  .show-more-button:hover {
    background-color: var(--color-bg-secondary);
    border-color: var(--color-text);
  }

  .show-more-button:focus {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
  }

  .show-more-button:active {
    transform: scale(0.98);
  }

</style>

<script>
  let visibleCount = 6;
  const INCREMENT = 6;

  const showMoreBtn = document.getElementById('showMoreBtn');
  const allCards = document.querySelectorAll('.post-card');

  // Tag color assignment - deterministic based on tag name
  const tagColors = ['blue', 'purple', 'green', 'orange', 'pink', 'cyan', 'amber', 'indigo'];

  function hashString(str: string): number {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32bit integer
    }
    return Math.abs(hash);
  }

  function assignTagColors() {
    const tags = document.querySelectorAll('.tag');
    tags.forEach(tag => {
      const tagText = tag.textContent?.toLowerCase() || '';
      const colorIndex = hashString(tagText) % tagColors.length;
      const colorClass = `tag-${tagColors[colorIndex]}`;
      tag.classList.add(colorClass);
    });
  }

  // Assign colors on load
  assignTagColors();

  // Function to update last-row classes based on visible cards
  function updateLastRowClasses() {
    // Remove all existing last-row classes
    allCards.forEach(card => card.classList.remove('last-row'));

    // Get visible cards
    const visibleCards = Array.from(allCards).filter((_card, index) => index < visibleCount);

    if (visibleCards.length === 0) return;

    // Featured card is always first, so we have 3 columns after it
    // Calculate how many cards are in the last row
    const cardsAfterFeatured = visibleCards.length - 1; // -1 for featured card
    const cardsInLastRow = cardsAfterFeatured % 3 || 3; // If 0, means full row of 3

    // Add last-row class to the last row of visible cards
    for (let i = 0; i < cardsInLastRow; i++) {
      const cardIndex = visibleCards.length - 1 - i;
      if (cardIndex >= 0) {
        visibleCards[cardIndex].classList.add('last-row');
      }
    }
  }

  // Initial update
  updateLastRowClasses();

  if (showMoreBtn) {
    showMoreBtn.addEventListener('click', () => {
      const previousCount = visibleCount;
      visibleCount += INCREMENT;

      allCards.forEach((card, index) => {
        if (index >= previousCount && index < visibleCount) {
          // Remove hidden class and add fade-in animation
          card.classList.remove('hidden');
          card.classList.add('fade-in');

          // Remove fade-in class after animation completes so it can be reused
          card.addEventListener('animationend', () => {
            card.classList.remove('fade-in');
          }, { once: true });
        }
      });

      // Update last-row classes after showing more cards
      updateLastRowClasses();

      // Hide button if all posts are visible
      if (visibleCount >= allCards.length) {
        showMoreBtn.style.display = 'none';
      }
    });
  }
</script>
